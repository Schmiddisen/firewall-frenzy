using UnityEngine;

public class MalwareScanner : TargetingTower
{
[Header("Upgrade JSON")]
    [SerializeField] TextAsset upgradeJson;

    [Header("Projectiles")]
    [SerializeField] private GameObject normalCritBullet;
    [SerializeField] private GameObject slowBullet;
    [SerializeField] private GameObject stunBullet;

    private GameObject critBullet;
    private GameObject standartBullet;
 
    private TowerPathUpgrades upgradeData;
    private float critChance = 0.2f;
    private float critDMGMultiplier = 1.5f;


    
    public void Start() {
        this.upgradeData = JsonUtility.FromJson<TowerPathUpgrades>(upgradeJson.text);
        critBullet = normalCritBullet;
        standartBullet = base.bulletPrefab;
    }

    public override void Shoot()
    {
        bool isCrit = Random.Range(0f, 1f) <= critChance;

        int dmgCache = base.currentDMG;

        base.bulletPrefab = standartBullet;

        //Critted
        if (isCrit) {
            //Apply crit
            currentDMG = Mathf.CeilToInt(dmgCache * critDMGMultiplier);
            base.bulletPrefab = critBullet;
        }
        
        

        base.Shoot();
        //Reset Damage
        base.currentDMG = dmgCache;
    }

    public override void upgrade(UpgradePath path)
    {
        //Which path
        Upgrades upgradeData = path == UpgradePath.PathA ? this.upgradeData.PathA : this.upgradeData.PathB;

        base.applyUpgrade(upgradeData, path);

        if (path == UpgradePath.PathB) {
            if (base.getCurrentLevel() == 1) {
                critBullet = slowBullet;
                critChance = 0.4f;
            }else if (base.getCurrentLevel() == 2) {
                this.critChance = 0.65f;
            }else if (base.getCurrentLevel() == 3) {
                critBullet = stunBullet;
            }
        }
        
    }
}
